// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Table Pay": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/tablepay/api/design
// --out=$(GOPATH)/src/github.com/tablepay/api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AssetsController is the controller interface for the Assets actions.
type AssetsController interface {
	goa.Muxer
	goa.FileServer
}

// MountAssetsController "mounts" a Assets resource controller on the given service.
func MountAssetsController(service *goa.Service, ctrl AssetsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/*filepath", ctrl.MuxHandler("preflight", handleAssetsOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/*filepath", "platform/tablepay/frontend/build")
	h = handleAssetsOrigin(h)
	service.Mux.Handle("GET", "/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Assets", "files", "platform/tablepay/frontend/build", "route", "GET /*filepath")

	h = ctrl.FileHandler("/", "platform/tablepay/frontend/build/index.html")
	h = handleAssetsOrigin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Assets", "files", "platform/tablepay/frontend/build/index.html", "route", "GET /")
}

// handleAssetsOrigin applies the CORS response headers corresponding to the origin.
func handleAssetsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// TablepayController is the controller interface for the Tablepay actions.
type TablepayController interface {
	goa.Muxer
	GetEncriptionKeyByMerchantforeignAndApikey(*GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext) error
	GetOrderByLocationAndTable(*GetOrderByLocationAndTableTablepayContext) error
	PostCloverPayByLocationAndTable(*PostCloverPayByLocationAndTableTablepayContext) error
}

// MountTablepayController "mounts" a Tablepay resource controller on the given service.
func MountTablepayController(service *goa.Service, ctrl TablepayController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/tablepay/:mfid/:apikey", ctrl.MuxHandler("preflight", handleTablepayOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/tablepay/:lid/order/:table", ctrl.MuxHandler("preflight", handleTablepayOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/pay/:mfid/:orderid", ctrl.MuxHandler("preflight", handleTablepayOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetEncriptionKeyByMerchantforeignAndApikeyTablepayContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetEncriptionKeyByMerchantforeignAndApikey(rctx)
	}
	h = handleTablepayOrigin(h)
	service.Mux.Handle("GET", "/tablepay/:mfid/:apikey", ctrl.MuxHandler("get_encription_key_by_merchantforeign_and_apikey", h, nil))
	service.LogInfo("mount", "ctrl", "Tablepay", "action", "GetEncriptionKeyByMerchantforeignAndApikey", "route", "GET /tablepay/:mfid/:apikey")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetOrderByLocationAndTableTablepayContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetOrderByLocationAndTable(rctx)
	}
	h = handleTablepayOrigin(h)
	service.Mux.Handle("GET", "/tablepay/:lid/order/:table", ctrl.MuxHandler("get_order_by_location_and_table", h, nil))
	service.LogInfo("mount", "ctrl", "Tablepay", "action", "GetOrderByLocationAndTable", "route", "GET /tablepay/:lid/order/:table")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPostCloverPayByLocationAndTableTablepayContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CloverPaymentPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.PostCloverPayByLocationAndTable(rctx)
	}
	h = handleTablepayOrigin(h)
	service.Mux.Handle("POST", "/pay/:mfid/:orderid", ctrl.MuxHandler("post_clover_pay_by_location_and_table", h, unmarshalPostCloverPayByLocationAndTableTablepayPayload))
	service.LogInfo("mount", "ctrl", "Tablepay", "action", "PostCloverPayByLocationAndTable", "route", "POST /pay/:mfid/:orderid")
}

// handleTablepayOrigin applies the CORS response headers corresponding to the origin.
func handleTablepayOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Expose-Headers", "Content-Type, Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalPostCloverPayByLocationAndTableTablepayPayload unmarshals the request body into the context request data Payload field.
func unmarshalPostCloverPayByLocationAndTableTablepayPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &cloverPaymentPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
