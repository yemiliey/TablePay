// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Table Pay": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/tablepay/api/design
// --out=$(GOPATH)/src/github.com/
tablepay/api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext provides the tablepay get_encription_key_by_merchantforeign_and_apikey action context.
type GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Apikey string
	Mfid   string
}

// NewGetEncriptionKeyByMerchantforeignAndApikeyTablepayContext parses the incoming request URL and body, performs validations and creates the
// context used by the tablepay controller get_encription_key_by_merchantforeign_and_apikey action.
func NewGetEncriptionKeyByMerchantforeignAndApikeyTablepayContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramApikey := req.Params["apikey"]
	if len(paramApikey) > 0 {
		rawApikey := paramApikey[0]
		rctx.Apikey = rawApikey
	}
	paramMfid := req.Params["mfid"]
	if len(paramMfid) > 0 {
		rawMfid := paramMfid[0]
		rctx.Mfid = rawMfid
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetEncriptionKeyByMerchantforeignAndApikeyTablepayContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GetOrderByLocationAndTableTablepayContext provides the tablepay get_order_by_location_and_table action context.
type GetOrderByLocationAndTableTablepayContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Lid   string
	Table string
}

// NewGetOrderByLocationAndTableTablepayContext parses the incoming request URL and body, performs validations and creates the
// context used by the tablepay controller get_order_by_location_and_table action.
func NewGetOrderByLocationAndTableTablepayContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetOrderByLocationAndTableTablepayContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetOrderByLocationAndTableTablepayContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLid := req.Params["lid"]
	if len(paramLid) > 0 {
		rawLid := paramLid[0]
		rctx.Lid = rawLid
		if ok := goa.ValidatePattern(`[0-9a-fA-F]{24}`, rctx.Lid); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`lid`, rctx.Lid, `[0-9a-fA-F]{24}`))
		}
	}
	paramTable := req.Params["table"]
	if len(paramTable) > 0 {
		rawTable := paramTable[0]
		rctx.Table = rawTable
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetOrderByLocationAndTableTablepayContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetOrderByLocationAndTableTablepayContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetOrderByLocationAndTableTablepayContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetOrderByLocationAndTableTablepayContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// PostCloverPayByLocationAndTableTablepayContext provides the tablepay post_clover_pay_by_location_and_table action context.
type PostCloverPayByLocationAndTableTablepayContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Mfid    string
	Orderid string
	Payload *CloverPaymentPayload
}

// NewPostCloverPayByLocationAndTableTablepayContext parses the incoming request URL and body, performs validations and creates the
// context used by the tablepay controller post_clover_pay_by_location_and_table action.
func NewPostCloverPayByLocationAndTableTablepayContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostCloverPayByLocationAndTableTablepayContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostCloverPayByLocationAndTableTablepayContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMfid := req.Params["mfid"]
	if len(paramMfid) > 0 {
		rawMfid := paramMfid[0]
		rctx.Mfid = rawMfid
	}
	paramOrderid := req.Params["orderid"]
	if len(paramOrderid) > 0 {
		rawOrderid := paramOrderid[0]
		rctx.Orderid = rawOrderid
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PostCloverPayByLocationAndTableTablepayContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PostCloverPayByLocationAndTableTablepayContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PostCloverPayByLocationAndTableTablepayContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *PostCloverPayByLocationAndTableTablepayContext) InternalServerError(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
