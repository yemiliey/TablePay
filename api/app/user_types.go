// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "Table Pay": Application User Types
//
// Command:
// $ goagen
// --design=github.com/tablepay/api/design
// --out=$(GOPATH)/src/github.com/tablepay/api
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
)

// Clover payment info.
type businessOwner struct {
	// Amount to pay in cents.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// API key for Clover.
	Apikey *string `form:"apikey,omitempty" json:"apikey,omitempty" xml:"apikey,omitempty"`
	// Card's encrypted token.
	CardEncrypted *string `form:"card_encrypted,omitempty" json:"card_encrypted,omitempty" xml:"card_encrypted,omitempty"`
	// Card's expiry month.
	ExpMonth *string `form:"exp_month,omitempty" json:"exp_month,omitempty" xml:"exp_month,omitempty"`
	// Card's expiry year.
	ExpYear *string `form:"exp_year,omitempty" json:"exp_year,omitempty" xml:"exp_year,omitempty"`
	// First 6 digits of the card's number.
	First6 *string `form:"first6,omitempty" json:"first6,omitempty" xml:"first6,omitempty"`
	// Last 4 digits of the card's number.
	Last4 *string `form:"last4,omitempty" json:"last4,omitempty" xml:"last4,omitempty"`
}

// Publicize creates BusinessOwner from businessOwner
func (ut *businessOwner) Publicize() *BusinessOwner {
	var pub BusinessOwner
	if ut.Amount != nil {
		pub.Amount = ut.Amount
	}
	if ut.Apikey != nil {
		pub.Apikey = ut.Apikey
	}
	if ut.CardEncrypted != nil {
		pub.CardEncrypted = ut.CardEncrypted
	}
	if ut.ExpMonth != nil {
		pub.ExpMonth = ut.ExpMonth
	}
	if ut.ExpYear != nil {
		pub.ExpYear = ut.ExpYear
	}
	if ut.First6 != nil {
		pub.First6 = ut.First6
	}
	if ut.Last4 != nil {
		pub.Last4 = ut.Last4
	}
	return &pub
}

// Clover payment info.
type BusinessOwner struct {
	// Amount to pay in cents.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// API key for Clover.
	Apikey *string `form:"apikey,omitempty" json:"apikey,omitempty" xml:"apikey,omitempty"`
	// Card's encrypted token.
	CardEncrypted *string `form:"card_encrypted,omitempty" json:"card_encrypted,omitempty" xml:"card_encrypted,omitempty"`
	// Card's expiry month.
	ExpMonth *string `form:"exp_month,omitempty" json:"exp_month,omitempty" xml:"exp_month,omitempty"`
	// Card's expiry year.
	ExpYear *string `form:"exp_year,omitempty" json:"exp_year,omitempty" xml:"exp_year,omitempty"`
	// First 6 digits of the card's number.
	First6 *string `form:"first6,omitempty" json:"first6,omitempty" xml:"first6,omitempty"`
	// Last 4 digits of the card's number.
	Last4 *string `form:"last4,omitempty" json:"last4,omitempty" xml:"last4,omitempty"`
}

// cloverPaymentPayload user type.
type cloverPaymentPayload struct {
	// Amount to pay in cents.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// API key for Clover.
	Apikey *string `form:"apikey,omitempty" json:"apikey,omitempty" xml:"apikey,omitempty"`
	// Card's encrypted token.
	CardEncrypted *string `form:"card_encrypted,omitempty" json:"card_encrypted,omitempty" xml:"card_encrypted,omitempty"`
	// Card's expiry month.
	ExpMonth *string `form:"exp_month,omitempty" json:"exp_month,omitempty" xml:"exp_month,omitempty"`
	// Card's expiry year.
	ExpYear *string `form:"exp_year,omitempty" json:"exp_year,omitempty" xml:"exp_year,omitempty"`
	// First 6 digits of the card's number.
	First6 *string `form:"first6,omitempty" json:"first6,omitempty" xml:"first6,omitempty"`
	// Last 4 digits of the card's number.
	Last4 *string `form:"last4,omitempty" json:"last4,omitempty" xml:"last4,omitempty"`
}

// Validate validates the cloverPaymentPayload type instance.
func (ut *cloverPaymentPayload) Validate() (err error) {
	if ut.Apikey == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "apikey"))
	}
	if ut.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "amount"))
	}
	if ut.ExpMonth == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "exp_month"))
	}
	if ut.ExpYear == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "exp_year"))
	}
	if ut.Last4 == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "last4"))
	}
	if ut.First6 == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "first6"))
	}
	if ut.CardEncrypted == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "card_encrypted"))
	}
	return
}

// Publicize creates CloverPaymentPayload from cloverPaymentPayload
func (ut *cloverPaymentPayload) Publicize() *CloverPaymentPayload {
	var pub CloverPaymentPayload
	if ut.Amount != nil {
		pub.Amount = *ut.Amount
	}
	if ut.Apikey != nil {
		pub.Apikey = *ut.Apikey
	}
	if ut.CardEncrypted != nil {
		pub.CardEncrypted = *ut.CardEncrypted
	}
	if ut.ExpMonth != nil {
		pub.ExpMonth = *ut.ExpMonth
	}
	if ut.ExpYear != nil {
		pub.ExpYear = *ut.ExpYear
	}
	if ut.First6 != nil {
		pub.First6 = *ut.First6
	}
	if ut.Last4 != nil {
		pub.Last4 = *ut.Last4
	}
	return &pub
}

// CloverPaymentPayload user type.
type CloverPaymentPayload struct {
	// Amount to pay in cents.
	Amount string `form:"amount" json:"amount" xml:"amount"`
	// API key for Clover.
	Apikey string `form:"apikey" json:"apikey" xml:"apikey"`
	// Card's encrypted token.
	CardEncrypted string `form:"card_encrypted" json:"card_encrypted" xml:"card_encrypted"`
	// Card's expiry month.
	ExpMonth string `form:"exp_month" json:"exp_month" xml:"exp_month"`
	// Card's expiry year.
	ExpYear string `form:"exp_year" json:"exp_year" xml:"exp_year"`
	// First 6 digits of the card's number.
	First6 string `form:"first6" json:"first6" xml:"first6"`
	// Last 4 digits of the card's number.
	Last4 string `form:"last4" json:"last4" xml:"last4"`
}

// Validate validates the CloverPaymentPayload type instance.
func (ut *CloverPaymentPayload) Validate() (err error) {
	if ut.Apikey == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "apikey"))
	}
	if ut.Amount == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "amount"))
	}
	if ut.ExpMonth == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "exp_month"))
	}
	if ut.ExpYear == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "exp_year"))
	}
	if ut.Last4 == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "last4"))
	}
	if ut.First6 == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "first6"))
	}
	if ut.CardEncrypted == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "card_encrypted"))
	}
	return
}
